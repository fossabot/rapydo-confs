version: '3'

# #####################
# VOLUMES
# #####################

volumes:
  jwt_tokens:
    driver: local
  rabbitdata:
    driver: local
  sqldata:
    driver: local
  mariadb:
    driver: local
  graphdata:
    driver: local
  mongodata:
    driver: local
  pureftpd:
    driver: local
  letsencrypt_certs:
    driver: local
  ssl_dhparam:
    driver: local
  flower_db:
    driver: local

# #####################
# NETWORKS
# #####################

networks:
  # default:
  i_net:
  app_net:
  proxy_net:
  worker_net:
  ftp_net:
  db_net:
    # # driver: bridge
    # ipam:
    #   driver: default
    #   config:
    #     # Note: use this configuration to match inside internal rules
    #     # TOFIX: make this an env variable
    #     - subnet: ${DB_SUBNET}/16

# #####################
# SERVICES
# #####################
services:

  ########################
  ###  MAIN CONTAINER  ###
  ########################
  backend:
    restart: on-failure:5
    # TO TEST the failure:
    # 1. go inside backend
    # 2. ps aux --forest
    # 3. kill process 1 and the tree branches

    # restart: always
    # command: sleep infinity
    build:
      context: ${SUBMODULE_DIR}/build-templates/${BACKEND_BUILD_MODE}
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}

    image: rapydo/${BACKEND_BUILD_MODE}:${RAPYDO_VERSION}
    # hostname: restapi
    hostname: rapydo_server
    environment:
      ACTIVATE: ${ACTIVATE_BACKEND}
      APP_MODE: debug
      DEBUG_LEVEL: ${LOG_LEVEL}
      CURRENT_UID: ${CURRENT_UID}
      FLASK_APP: ${PYTHON_PATH}/restapi/${PYTHON_MAIN_FILE}.py
      UWSGI_APP: restapi.${PYTHON_MAIN_FILE}
      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      EXTENDED_PACKAGE: ${EXTENDED_PROJECT}
      JWT_APP_SECRETS: ${JWT_APP_SECRETS}
      DOMAIN: ${PROJECT_DOMAIN}

      # enable the basic /api/login method
      MAIN_LOGIN_ENABLE: 1
      # base the user/role mechanism on some database
      AUTH_ENABLE: 0
      # AUTH_SERVICE: ${AUTH_SERVICE}
      AUTH_REGISTER_FAILED_LOGIN: ${AUTH_REGISTER_FAILED_LOGIN}
      AUTH_FORCE_FIRST_PASSWORD_CHANGE: ${AUTH_FORCE_FIRST_PASSWORD_CHANGE}
      AUTH_VERIFY_PASSWORD_STRENGTH: ${AUTH_VERIFY_PASSWORD_STRENGTH}
      AUTH_MAX_PASSWORD_VALIDITY: ${AUTH_MAX_PASSWORD_VALIDITY}
      AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER: ${AUTH_DISABLE_UNUSED_CREDENTIALS_AFTER}
      AUTH_MAX_LOGIN_ATTEMPTS: ${AUTH_MAX_LOGIN_ATTEMPTS}
      AUTH_SECOND_FACTOR_AUTHENTICATION: ${AUTH_SECOND_FACTOR_AUTHENTICATION}
      TOKEN_SHORT_TTL: ${TOKEN_SHORT_TTL}
      TOKEN_LONG_TTL: ${TOKEN_LONG_TTL}
      ALLOW_ACCESS_TOKEN_PARAMETER: ${ALLOW_ACCESS_TOKEN_PARAMETER}

      REGISTRATION_NOTIFICATIONS: ${REGISTRATION_NOTIFICATIONS}

      DEBUG_ENDPOINTS: 0

      SMTP_ADMIN: ${SMTP_ADMIN}
      SMTP_NOREPLY: ${SMTP_NOREPLY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}

      SENTRY_URL: ${SENTRY_URL}
    volumes:
      # configuration files
      - ${SUBMODULE_DIR}/rapydo-confs/projects_defaults.yaml:/code/confs/projects_defaults.yaml
      - ${PROJECT_DIR}/project_configuration.yaml:/code/confs/project_configuration.yaml
      # Vanilla code
      - ${PROJECT_DIR}/backend:/code/${COMPOSE_PROJECT_NAME}
      # From project, if any
      - ${EXTENDED_PROJECT_PATH}/backend:/code/${EXTENDED_PROJECT}
      - ${EXTENDED_PROJECT_PATH}/project_configuration.yaml:/code/confs/extended_project_configuration.yaml
      # JWT tokens secret
      - jwt_tokens:${JWT_APP_SECRETS}
    networks:
      app_net:
        aliases:
          - ${FLASK_HOST}
      db_net:
      # i_net:
    privileged: ${DOCKER_PRIVILEGED_MODE}

  ##############################
  proxy:
    restart: always
    build:
      context: ${SUBMODULE_DIR}/build-templates/proxy
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
    image: rapydo/proxy:${RAPYDO_VERSION}
    hostname: reverseproxy
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - ssl_dhparam:/etc/nginx/ssl/
    networks:
      proxy_net:
        aliases:
          - ${PROXY_HOST}
      app_net:
    ports:
      - ${PROXY_DEV_PORT}:80   # 80 redirect
      - ${PROXY_PROD_PORT}:443 # 443 SSL
    environment:
      DOMAIN: ${PROJECT_DOMAIN}
      MODE: ${LETSENCRYPT_MODE}
      ACTIVATE: ${ACTIVATE_PROXY}
      CURRENT_UID: ${CURRENT_UID}
      SMTP_ADMIN: ${SMTP_ADMIN}
      DEFAULT_DHLEN: {$DEFAULT_DHLEN}
    depends_on:
      # NOTE: you have to rewrite all depends_on in a new yml file
      # at the moment they do not cumulate
      - backend
      # - frontend

  # Cloned from proxy service
  certificates-proxy:
    # restart: no
    build:
      context: ${SUBMODULE_DIR}/build-templates/proxy
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
    image: rapydo/proxy:${RAPYDO_VERSION}
    command: updatecertificates
    hostname: reverseproxy
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - ssl_dhparam:/etc/nginx/ssl/
      - ${SUBMODULE_DIR}/rapydo-confs/confs/nginx/certificates.conf:/etc/nginx/sites-enabled/production

    networks:
      proxy_net:
        aliases:
          - ${PROXY_HOST}
    ports:
      - ${PROXY_DEV_PORT}:${PROXY_DEV_PORT}   # 80 redirect
      - ${PROXY_PROD_PORT}:${PROXY_PROD_PORT} # 443 SSL
    environment:
      ACTIVATE: 0
      DOMAIN: ${PROJECT_DOMAIN}
      MODE: ${LETSENCRYPT_MODE}
      SMTP_ADMIN: ${SMTP_ADMIN}
      CURRENT_UID: ${CURRENT_UID}

  ###################
  ###  DATABASES  ###
  ###################
  postgres:
    # restart: always
    restart: on-failure:5
    image: postgres:10.7-alpine
    volumes:
      - sqldata:/var/lib/postgresql/data
      - ${SUBMODULE_DIR}/rapydo-confs/confs/postgresql/pgs_init.sh:/docker-entrypoint-initdb.d/setup-my-schema.sh:ro
    environment:
      ACTIVATE: ${ACTIVATE_POSTGRES}
      POSTGRES_USER: "${PLACEHOLDER}"
      POSTGRES_PASSWORD: "${PLACEHOLDER}"
      POSTGRES_DBS: ${PLACEHOLDER}
    networks:
      db_net:
        aliases:
          - ${ALCHEMY_HOST}

  mariadb:
    # restart: always
    restart: on-failure:5
    image: mariadb:10.4.4
    volumes:
      - mariadb:/var/lib/mysql
    environment:
      ACTIVATE: ${ACTIVATE_POSTGRES}
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
      MYSQL_USER: "${PLACEHOLDER}"
      MYSQL_PASSWORD: "${PLACEHOLDER}"
      MYSQL_DATABASE: ${PLACEHOLDER}
    networks:
      db_net:
        aliases:
          - ${ALCHEMY_HOST}

  neo4j:
    restart: on-failure:5
    image: neo4j:3.5.3
    volumes:
      - graphdata:/data
    networks:
      db_net:
        aliases:
          - ${GRAPHDB_HOST}
    environment:
      ACTIVATE: ${ACTIVATE_NEO4J}
      # Note: once changed this, also set GRAPHDB_PASSWORD in backend service
      NEO4J_AUTH: neo4j/${PLACEHOLDER}
      # NEO4J_dbms_memory_pagecache_size: 2048M
      # NEO4J_dbms_memory_heap_maxSize: 4096M
    # ports:
    #   - 9090:7474
    #   - 7687:7687

  mongodb:
    restart: on-failure:5
    image: mongo:4.1.4
    volumes:
      - mongodata:/data/db
    networks:
      db_net:
        aliases:
          - ${MONGO_HOST}
    environment:
      ACTIVATE: ${ACTIVATE_MONGODB}

  #########################
  ###  QUEUE MANAGEMENT ###
  #########################

  celery:
    restart: on-failure:5
    build:
      # context: ${SUBMODULE_DIR}/build-templates/celery
      context: ${SUBMODULE_DIR}/build-templates/${BACKEND_BUILD_MODE}
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
    image: rapydo/${BACKEND_BUILD_MODE}:${RAPYDO_VERSION}
    entrypoint: docker-entrypoint-celery
    command: celery worker --concurrency=1 -Ofair -A restapi.flask_ext.flask_celery.worker.celery_app -Q celery -n ${COMPOSE_PROJECT_NAME}-%h
    
    user: developer
    working_dir: /code
    environment:
      APP_MODE: debug
      DEBUG_LEVEL: ${LOG_LEVEL}
      ACTIVATE: ${ACTIVATE_CELERY}
      CURRENT_UID: ${CURRENT_UID}
      DOMAIN: ${PROJECT_DOMAIN}
      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      EXTENDED_PACKAGE: ${EXTENDED_PROJECT}
      JWT_APP_SECRETS: ${JWT_APP_SECRETS}

      CELERY_ENABLE: 1
      CELERY_EXTERNAL: ${CELERY_EXTERNAL}

      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BROKER_HOST: ${CELERY_BROKER_HOST}
      CELERY_BROKER_PORT: ${CELERY_BROKER_PORT}
      CELERY_BROKER_USER: ${CELERY_BROKER_USER}
      CELERY_BROKER_PASSWORD: ${CELERY_BROKER_PASSWORD}
      CELERY_BROKER_VHOST: ${CELERY_BROKER_VHOST}

      CELERY_BACKEND: ${CELERY_BACKEND}
      CELERY_BACKEND_HOST: ${CELERY_BACKEND_HOST}
      CELERY_BACKEND_PORT: ${CELERY_BACKEND_PORT}
      CELERY_BACKEND_USER: ${CELERY_BACKEND_USER}
      CELERY_BACKEND_PASSWORD: ${CELERY_BACKEND_PASSWORD}

      SMTP_ADMIN: ${SMTP_ADMIN}
      SMTP_NOREPLY: ${SMTP_NOREPLY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      # configuration files
      - ${SUBMODULE_DIR}/rapydo-confs/projects_defaults.yaml:/code/confs/projects_defaults.yaml
      - ${PROJECT_DIR}/project_configuration.yaml:/code/confs/project_configuration.yaml
      # Vanilla code
      - ${PROJECT_DIR}/backend:/code/${COMPOSE_PROJECT_NAME}
      # From project, if any
      - ${EXTENDED_PROJECT_PATH}/backend:/code/${EXTENDED_PROJECT}
      - ${EXTENDED_PROJECT_PATH}/project_configuration.yaml:/code/confs/extended_project_configuration.yaml
      # JWT tokens secret
      - jwt_tokens:${JWT_APP_SECRETS}
    networks:
      db_net:
      worker_net:
    # depends_on:
    #   - rabbit
    #   # - celeryui

  rabbit:
    restart: on-failure:5
    image: rabbitmq:latest
    hostname: rabbit
    environment:
      # CAN BE locally changed by ovverride with:
      # ACTIVATE: ${ACTIVATE_RABBIT}  
      ACTIVATE: ${ACTIVATE_CELERY}

    volumes:
      - rabbitdata:/var/lib/rabbitmq
    networks:
      worker_net:
        aliases:
          - ${CELERY_BROKER_HOST}

  ##########################
  ### SERVICE INTERFACES ###
  ##########################

  celeryui:
    restart: on-failure:5
    build:
      # context: ${SUBMODULE_DIR}/build-templates/celery
      context: ${SUBMODULE_DIR}/build-templates/${BACKEND_BUILD_MODE}
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
    image: rapydo/${BACKEND_BUILD_MODE}:${RAPYDO_VERSION}
    entrypoint: docker-entrypoint-celery
    user: root
    command: flower --basic_auth=${CELERYUI_USER}:${CELERYUI_PASSWORD} --port=${CELERYUI_PORT} --persistent --db=${CELERYUI_DBDIR}/flower -A restapi.flask_ext.flask_celery.worker.celery_app -n flower_monitor
    # Production command:
    # command: flower --basic_auth=${CELERYUI_USER}:${CELERYUI_PASSWORD} --port=${CELERYUI_PORT} --persistent --db=${CELERYUI_DBDIR}/flower --certfile=/ssl/real/fullchain1.pem --keyfile=/ssl/real/privkey1.pem -A restapi.flask_ext.flask_celery.worker.celery_app -n flower_monitor
    hostname: flower
    working_dir: /code
    expose:
      - ${CELERYUI_PORT}
    ports:
      - ${CELERYUI_PORT}:${CELERYUI_PORT}
    volumes:
      # configuration files
      - ${SUBMODULE_DIR}/rapydo-confs/projects_defaults.yaml:/code/confs/projects_defaults.yaml
      - ${PROJECT_DIR}/project_configuration.yaml:/code/confs/project_configuration.yaml
      # Vanilla code
      - ${PROJECT_DIR}/backend:/code/${COMPOSE_PROJECT_NAME}
      # From project, if any
      - ${EXTENDED_PROJECT_PATH}/backend:/code/${EXTENDED_PROJECT}
      - ${EXTENDED_PROJECT_PATH}/project_configuration.yaml:/code/confs/extended_project_configuration.yaml
      # JWT tokens secret
      - jwt_tokens:${JWT_APP_SECRETS}
      - flower_db:${CELERYUI_DBDIR}
      - letsencrypt_certs:/ssl
    networks:
      db_net:
      worker_net:
    # depends_on:
    #   - rabbit
    environment:
      APP_MODE: debug
      DEBUG_LEVEL: ${LOG_LEVEL}
      ACTIVATE: ${ACTIVATE_CELERYUI}
      CURRENT_UID: ${CURRENT_UID}

      VANILLA_PACKAGE: ${COMPOSE_PROJECT_NAME}
      EXTENDED_PACKAGE: ${EXTENDED_PROJECT}
      JWT_APP_SECRETS: ${JWT_APP_SECRETS}

      CELERY_ENABLE: 1
      CELERY_EXTERNAL: ${CELERY_EXTERNAL}

      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BROKER_HOST: ${CELERY_BROKER_HOST}
      CELERY_BROKER_PORT: ${CELERY_BROKER_PORT}
      CELERY_BROKER_USER: ${CELERY_BROKER_USER}
      CELERY_BROKER_PASSWORD: ${CELERY_BROKER_PASSWORD}
      CELERY_BROKER_VHOST: ${CELERY_BROKER_VHOST}

      CELERY_BACKEND: ${CELERY_BACKEND}
      CELERY_BACKEND_HOST: ${CELERY_BACKEND_HOST}
      CELERY_BACKEND_PORT: ${CELERY_BACKEND_PORT}
      CELERY_BACKEND_USER: ${CELERY_BACKEND_USER}
      CELERY_BACKEND_PASSWORD: ${CELERY_BACKEND_PASSWORD}

      CELERYUI_PORT: ${CELERYUI_PORT}
      CELERYUI_USER: ${PLACEHOLDER}
      CELERYUI_PASSWORD: ${PLACEHOLDER}
      CELERYUI_DBDIR: ${CELERYUI_DBDIR}


  swaggerui:
    # restart: no
    # build: ${SUBMODULE_DIR}/build-templates/swaggerui
    image: swaggerapi/swagger-ui:latest
    # image: swaggerapi/swagger-ui:v3.0.5
    environment:
      ACTIVATE: ${ACTIVATE_SWAGGERUI}
    ports:
      - 7777:8080

  sqlalchemyui:
    # restart: no
    # NOTE: this image let you access sqllite/postgres/mysql
    # with a phpmyadmin-like web page
    image: adminer:4.7.1-standalone
    networks:
      db_net:
    environment:
      ACTIVATE: ${ACTIVATE_SQLALCHEMYUI}
      # https://github.com/vrana/adminer/tree/master/designs
      # ADMINER_DESIGN: brade

  mongoui:
    # restart: no
    image: mongo-express:0.45.0
    environment:
      ACTIVATE: ${ACTIVATE_MONGOUI}
      ME_CONFIG_MONGODB_SERVER: ${MONGO_HOST}
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
    networks:
      db_net:

  #############
  # REST API client (wget, curl, httpie, http-prompt)
  restclient:
    # restart: no
    build:
      context: ${SUBMODULE_DIR}/build-templates/restclient
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
    # image: ${COMPOSE_PROJECT_NAME}/restclient:template
    image: rapydo/restclient:${RAPYDO_VERSION}
    hostname: rapydo_client
    environment:
      MAIN_ENDPOINT: ${API_MAIN_ENDPOINT}
      ACTIVATE: ${ACTIVATE_RESTCLIENT}
      CURRENT_UID: ${CURRENT_UID}
    volumes:
      - ${PROJECT_DIR}/project_configuration.yaml:/code/custom.yaml
      - ${SUBMODULE_DIR}/rapydo-confs/projects_defaults.yaml:/code/base.yaml

  ###################
  ### FTP SERVER  ###
  ###################
  ftp:
    restart: on-failure:5 
    # image: stilliard/pure-ftpd:latest
    build: ${SUBMODULE_DIR}/build-templates/ftp
    # image: ${COMPOSE_PROJECT_NAME}/ftp:template
    image: rapydo/ftp:${RAPYDO_VERSION}
    volumes:
      - pureftpd:/etc/pure-ftpd/passwd
  # /etc/ssl/private/ A directory containing a single pure-ftpd.pem file
  # with the server's SSL certificates for TLS support. Optional TLS is
  # automatically enabled when the container finds this file on startup.
    environment:
      ACTIVATE: ${ACTIVATE_FTP}
      PUBLICHOST: ${PROJECT_DOMAIN}
      ADDED_FLAGS: -d -d
    networks:
      ftp_net:

  ######################################################
  ###  iRODS iCAT server (usually for EUDAT B2safe)  ###
  ######################################################
  icat:
    # restart: no
    # B2safe instance on irods
    build:
      context: ${SUBMODULE_DIR}/build-templates/icat
      args:
        RAPYDO_VERSION: ${RAPYDO_VERSION}
        CURRENT_UID: ${CURRENT_UID}
    image: rapydo/icat:${RAPYDO_VERSION}
    hostname: ${IRODS_HOST}
    # command: sleep infinity
    environment:
      ACTIVATE: ${ACTIVATE_ICAT}
      CURRENT_UID: ${CURRENT_UID}
      POSTGRES_HOST: ${PLACEHOLDER}
      POSTGRES_USER: ${PLACEHOLDER}
      POSTGRES_PASSWORD: ${PLACEHOLDER}
      IRODS_HOST: ${PLACEHOLDER}
      IRODS_PORT: ${PLACEHOLDER}
      IRODS_ZONE: ${PLACEHOLDER}
      IRODS_DB: ${PLACEHOLDER}
      IRODS_USER: ${PLACEHOLDER}
      IRODS_PASSWORD: ${PLACEHOLDER}
    networks:
      i_net:
        aliases:
          - ${IRODS_HOST}
      db_net:
    depends_on:
      - postgres
